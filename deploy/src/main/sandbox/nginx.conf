server {

  listen 443 ssl default_server;

  server_name         hono.eclipse.org;

  ssl_certificate     hono.eclipse.org-cert.pem;
  ssl_certificate_key hono.eclipse.org-key.pem;
  ssl_protocols       TLSv1.2 TLSv1.3;
  ssl_ciphers         HIGH:!aNULL:!MD5;

  large_client_header_buffers 4 256k;

  location = / {
    return 301 https://www.eclipse.org/hono/sandbox/;
  }

  # expose Grafana dashboard
  #
  # also requires starting the Grafana container with the following environment variables:
  #
  #  GF_SERVER_DOMAIN=hono.eclipse.org \
  #  GF_SERVER_ROOT_URL="%(protocol)s://%(domain)s/grafana/" \
  #
#  location /grafana/ {
#    proxy_pass http://grafana${service.suffix}:3000/;
#  }

  location = /client {
    return 301 'https://ci.eclipse.org/hono/job/Hono-Nightly Pipeline/lastSuccessfulBuild/artifact/cli/target/hono-cli-${project.version}-exec.jar';
  }

  # Rule for legitimate Let's Encrypt ACME Challenge requests (like /.well-known/acme-challenge/xxxxxxxxx)
  # We use ^~ here, so that we don't check other regexes (for speed-up).
  location ^~ /.well-known/acme-challenge/ {
 
    # Set correct content type. According to this:
    # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
    # Current specification requires "text/plain" or no content header at all.
    # It seems that "text/plain" is a safe option.
    default_type "text/plain";

    # This directory must be the same as in /etc/letsencrypt/cli.ini
    # as "webroot-path" parameter. Also don't forget to set "authenticator" parameter
    # there to "webroot".
    # Do NOT use alias, use root! Target directory is located here:
    # /var/www/common/letsencrypt/.well-known/acme-challenge/
    root /var/www/letsencrypt;
  }

  # Hide /acme-challenge subdirectory and return 404 on all requests.
  # It is somewhat more secure than letting Nginx return 403.
  # Ending slash is important!
  location = /.well-known/acme-challenge/ {
  }
}
